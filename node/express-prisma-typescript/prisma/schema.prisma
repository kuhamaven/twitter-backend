// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReactionType {
  Like
  Retweet
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String
  profilePicture String @default("") // Add a default value here

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")
  isPrivate Boolean
  reactions Reaction[]
  messages       Message[]
  conversations  Conversation[] @relation("UserConversations")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  reactions Reaction[] @relation(name: "reactions")

  parent Post? @relation("CommentToPost", fields: [parentId], references: [id]) // Self-referential relationship for comments
  comments Post[] @relation("CommentToPost") // Self-referential relationship for comments
  parentId String? @db.Uuid // Self-referential field for comments
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  postId String @db.Uuid
  authorId String   @db.Uuid
  reactionType ReactionType

  reacted Post @relation(name: "reactions", fields: [postId], references: [id], onDelete: Cascade) // One to many
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
}

model Conversation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key
  createdAt DateTime  @default(now())

  members  User[] @relation("UserConversations")
  messages Message[]
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String @db.Uuid // Foreign Key
  conversationId String @db.Uuid // Foreign Key
  content  String @db.VarChar(240) // Limit the content to 240 characters

  createdAt DateTime  @default(now())

  author       User         @relation(fields: [authorId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}